# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IYuTQiXcbzJ8WgjKseYOA1PKJ9ZNOVW_

# Upload Dataset
"""

from google.colab import files
uploaded = files.upload()

""" # Load Dataset"""

import pandas as pd

# Load dataset
df = pd.read_csv('crime_vs_socioeconomic_factors.csv')
df.head()

""" # Data Exploration"""

# Dataset shape
print("Shape of the dataset:", df.shape)

# Columns and data types
print("Columns:", df.columns.tolist())
df.info()

# Descriptive statistics
df.describe()

"""# Check for missing values and duplicates"""

# Check for missing values and duplicates
print("Missing Values:\n", df.isnull().sum())
print("Duplicate Rows:", df.duplicated().sum())

"""#  Visualize a Few Features"""

import seaborn as sns
import matplotlib.pyplot as plt

# Example: visualizing 'Crime_Rate' distribution
sns.histplot(df['Crime_Rate'], kde=True)
plt.title('Distribution of Crime Rate')
plt.xlabel('Crime Rate')
plt.show()

# Correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()

""" # Identify Target and Features"""

target = 'Crime_Rate'  # Make sure this is the correct column name
features = df.columns.drop(target)
print("Features:", features.tolist())

"""# Convert Categorical Columns to Numerical"""

categorical_cols = df.select_dtypes(include=['object']).columns
print("Categorical Columns:", categorical_cols.tolist())

"""# One-Hot Encoding"""

df_encoded = pd.get_dummies(df, drop_first=True)
X = df_encoded.drop(columns=[target])
y = df_encoded[target]

"""# Feature Scaling"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_encoded.drop(target, axis=1))
y = df_encoded[target]

"""# Train-Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""# Model Building"""

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

"""#  Evaluation"""

from sklearn.metrics import mean_squared_error, r2_score

y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

"""#  Make Predictions from New Input"""

# Replace with actual values from your dataset's features
new_input = {
    'feature1': 0.25,
    'feature2': 1,
    'feature3': 3.5,
    # Add all features here based on df.columns.drop('Crime_Rate')
}

"""#  Convert to DataFrame and Encode"""

new_df = pd.DataFrame([new_input])
df_temp = pd.concat([df.drop(target, axis=1), new_df], ignore_index=True)
df_temp_encoded = pd.get_dummies(df_temp, drop_first=True)
df_temp_encoded = df_temp_encoded.reindex(columns=df_encoded.drop(target, axis=1).columns, fill_value=0)

new_input_scaled = scaler.transform(df_temp_encoded.tail(1))

"""# Predict the Final Grade (in this case: Crime Rate)"""

predicted_crime_rate = model.predict(new_input_scaled)
print("ðŸš¨ Predicted Crime Rate:", round(predicted_crime_rate[0], 2))

"""# Deployment using Gradio"""

!pip install gradio

print(df['Crime_Rate'].unique())

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(random_state=42)  # this RE-DEFINES the trained model

import gradio as gr
import numpy as np

# Get feature names from X used earlier
feature_names = X.columns.tolist()

def predict_crime_rate(*inputs):
    input_array = np.array(inputs).reshape(1, -1)
    scaled_input = scaler.transform(input_array)
    prediction = model.predict(scaled_input)[0]
    return round(prediction, 2)

input_components = [gr.Number(label=feature) for feature in feature_names]

# Launch the app
gr.Interface(
    fn=predict_crime_rate,
    inputs=input_components,
    outputs=gr.Number(label="Predicted Crime Rate"),
    title="ðŸš¨ Crime Rate Prediction App",
    description="Enter socioeconomic factors to predict the crime rate using a trained machine learning model."
).launch()